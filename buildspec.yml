version: 0.2

phases:
  install:
    runtime-versions:
      golang: 1.x
  
  pre_build:
    commands:
      - echo "Installing dependencies..."
      - go mod download
      
  build:
    commands:
      - echo "Building Lambda function..."
      - GOOS=linux GOARCH=amd64 go build -o main
      
  post_build:
    commands:
      - echo "Creating deployment package..."
      - zip function.zip main
      # First update and publish the new version
      - NEW_VERSION=$(aws lambda update-function-code --function-name ALSCalendarParser --zip-file fileb://function.zip --publish --query 'Version' --output text)
      - |
        # Get the current version from LIVE alias or use 1 if it doesn't exist
        if aws lambda get-alias --function-name ALSCalendarParser --name LIVE &> /dev/null; then
          CURRENT_VERSION=$(aws lambda get-alias --function-name ALSCalendarParser --name LIVE --query 'FunctionVersion' --output text)
        else
          CURRENT_VERSION="1"
        fi
        
        echo "Current version: $CURRENT_VERSION"
        echo "New version: $NEW_VERSION"
        
        # Update the LIVE alias to point to the new version
        if ! aws lambda get-alias --function-name ALSCalendarParser --name LIVE &> /dev/null; then
          aws lambda create-alias --function-name ALSCalendarParser --name LIVE --function-version $NEW_VERSION
        else
          aws lambda update-alias --function-name ALSCalendarParser --name LIVE --function-version $NEW_VERSION
        fi
        
        # Create appspec.yml after alias is updated
        cat > appspec.yml << EOF
version: 0.0
Resources:
  - myLambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        Name: ALSCalendarParser
        Alias: LIVE
        CurrentVersion: $CURRENT_VERSION
        TargetVersion: $NEW_VERSION
EOF

artifacts:
  files:
    - appspec.yml
    - function.zip
  discard-paths: yes

cache:
  paths:
    - /go/pkg/mod/**/* 