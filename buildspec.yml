version: 0.2

phases:
  install:
    runtime-versions:
      golang: 1.x
  
  pre_build:
    commands:
      - echo "Installing dependencies..."
      - go mod download
      
  build:
    commands:
      - echo "Building Lambda function..."
      - GOOS=linux GOARCH=amd64 go build -o bootstrap
      
  post_build:
    commands:
      - echo "Uploading email template to S3..."
      - aws s3 cp email-template.html s3://${S3_BUCKET_NAME}/email-template.html --content-type text/html
      - echo "Creating deployment package..."
      - zip function.zip bootstrap
      - NEW_VERSION=$(aws lambda update-function-code --function-name ALSCalendarParser --zip-file fileb://function.zip --publish --query 'Version' --output text)
      - |
        if aws lambda get-alias --function-name ALSCalendarParser --name LIVE &> /dev/null; then
          CURRENT_VERSION=$(aws lambda get-alias --function-name ALSCalendarParser --name LIVE --query 'FunctionVersion' --output text)
        else
          CURRENT_VERSION=1
          aws lambda create-alias --function-name ALSCalendarParser --name LIVE --function-version $CURRENT_VERSION
        fi
        echo "Current version: ${CURRENT_VERSION}"
        echo "New version: ${NEW_VERSION}"
        sed -i "s/CURRENT_VERSION_PLACEHOLDER/${CURRENT_VERSION}/g" appspec.yml
        sed -i "s/TARGET_VERSION_PLACEHOLDER/${NEW_VERSION}/g" appspec.yml
        echo "Generated appspec.yml:"
        cat appspec.yml

artifacts:
  files:
    - appspec.yml
    - function.zip
  discard-paths: yes

cache:
  paths:
    - /go/pkg/mod/**/* 